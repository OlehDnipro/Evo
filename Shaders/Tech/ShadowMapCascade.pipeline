/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\ 
*Copyright 2021 Oleh Sopilniak																																	*
*																																								*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software																	*
* and associated documentation files (the "Software"), to deal in the Software without restriction,																*
* including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,															*
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,															*
*  subject to the following conditions:																															*
*																																								*
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.								*	
*																																								*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,			*
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
#define SHADOW_CASCADES_COUNT 4
struct VertexIn
{
	float3 pos    : Position;
	float2 uv     : TexCoord;
	float3 color  : Color;
	float3 normal : Normal;
};
struct SPerFrame
{
	float4x4 projection;
	float4x4 view;
	float3 lightDir;
	float pad;
};
struct SShadow
{
	float4x4 lightViewProjection[SHADOW_CASCADES_COUNT];
	float4 cascadeSplits;

};
struct SReflect
{
	float4x4 reflectMatrix;
	float4x4 reflectMatrixTInv;
	float4 plane;
};
struct SPerModel
{
	float4x4 model;
	uint alphaCheck;
	uint3 pad;
};
struct PixelIn
{
	float4 posH    : SV_Position;
	float3 posW    : Position0;
	float3 posV    : Position1;
	float2 uv      : TexCoord;
	float3 color   : Color;
	float3 normal  : Normal;
	float clipDist : SV_ClipDistance0;
};
[Permutations]
PERMUTATIONS_BEGIN
	MUTE MainPass
	MUTE ShadowPass SHADOWPASS
	MUTE NoShadowPass NOSHADOW
	MUTE Reflection NOSHADOW REFLECTION

PERMUTATIONS_END

[Rootsig]
ROOT_BEGIN
	ST_BEGIN Samplers
		SAMPLER		SamplerState ColorSampler;
		SAMPLER		SamplerComparisonState  ShadowSampler;
	ST_END
	RT_BEGIN Resources
		CBUFFER SPerFrame ViewportConst;		
		CBUFFER SShadow ShadowConst;	
		CBUFFER SReflect ReflectConst;	
		TEXTURE Texture2DArray ShadowMapCascades;
		CBUFFER SPerModel ModelConst;
		TEXTURE Texture2D ModelTexture;
	RT_END
ROOT_END
[Vertex: VS]

void main(VertexIn vert, out PixelIn res) 
{
	res.color = vert.color;
	res.uv = vert.uv;
	res.posW = mul(ModelConst.model, float4(vert.pos, 1.0f)).xyz;
	#ifdef REFLECTION
		res.posW = mul(ReflectConst.reflectMatrix, float4(res.posW, 1.0f)).xyz;
		res.normal = mul(ReflectConst.reflectMatrixTInv, float4(vert.normal,0)).xyz;
	#else
		res.normal = vert.normal;
	#endif
	res.posV = mul(ViewportConst.view, float4(res.posW, 1.0f)).xyz;
	res.posH = mul(ViewportConst.projection, float4(res.posV, 1.0f));
	#ifdef REFLECTION
		res.clipDist = -dot(ReflectConst.plane, float4(res.posW, 1.0f));
	#else
		res.clipDist = 1;
	#endif
}

[Pixel: PS]
#define ambient 0.3
#define PCF_step 1.0f/4096
float SamplePCF(float4 shadowPos, int cascade)
{
	float2 uv = float2((1 + shadowPos.x)/2, (1 - shadowPos.y)/2 );
	float inLight = 0;
	for(int i = -1; i <= 1; i++ )
	{
		for(int j = -1; j <= 1; j++ )
		{
			inLight += ShadowMapCascades.SampleCmp(ShadowSampler, float3(uv + float2(i*PCF_step,j*PCF_step), cascade), shadowPos.z - 0.002);
		}
	}
	return inLight / 9;
}
void main(PixelIn pix, out float4 outFragColor: SV_TARGET)
{
	
#ifndef SHADOWPASS
	float4 color = ModelTexture.Sample(ColorSampler, pix.uv);
	
	if(color.a < 0.5)
	{
		clip(-1);
	}
	// Directional light
	float3 N = normalize(pix.normal);
	#ifdef REFLECTION
		float3 L = normalize(-1*mul(ReflectConst.reflectMatrix,float4(ViewportConst.lightDir,0)).xyz);
	#else
		float3 L = normalize(-ViewportConst.lightDir);
	#endif
	float3 H = normalize(L + pix.posV);
	int cascade = 0;
#ifndef NOSHADOW
	for(int  i = 0; i < SHADOW_CASCADES_COUNT - 1; i++)
	{
		if(pix.posV.z > ShadowConst.cascadeSplits[i])
			cascade = i + 1;
	}

	float4 shadowPos = mul(ShadowConst.lightViewProjection[cascade], float4(pix.posW, 1 ));
	shadowPos /= shadowPos.w;
	float diffuse = max(SamplePCF(shadowPos, cascade)*dot(N, L), ambient);
#else
	float diffuse = max(dot(N, L), ambient);
#endif
	float3 lightColor = float3(1.0f,1.0f,1.0f);
	outFragColor.rgb = max(lightColor * (diffuse * color.rgb), float3(0.0f, 0.0f, 0.0f));
	outFragColor.a = color.a;
	
#else
	if(ModelConst.alphaCheck)
	{
		float4 color = ModelTexture.Sample(ColorSampler, pix.uv);
	
		if(color.a < 0.5)
		{
			clip(-1);
		}
	}
#endif
} 