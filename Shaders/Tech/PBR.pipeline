/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\ 
*Copyright 2021 Oleh Sopilniak																																	*
*																																								*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software																	*
* and associated documentation files (the "Software"), to deal in the Software without restriction,																*
* including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,															*
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,															*
*  subject to the following conditions:																															*
*																																								*
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.								*	
*																																								*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,			*
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, *
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
struct VertexIn
{
	float3 pos    : Position;
};
struct SPerFrame
{
	float4x4 projection;
	float4x4 view;
	float3 lightDir;
	float pad;
	float3 camPos;
	float pad1;

};
struct SPBRModel
{
	float4x4 model;
	float4 material;
	//roughness, metallness, reflectance,..
	float3 baseColor;
	float pad;
};
struct PixelIn
{
	float4 posH    : SV_Position;
	float3 posW    : Position0;
	float3 posV    : Position1;
	float3 normal  : Normal0;
};
#include "PBRMath.h" 
[Rootsig]
ROOT_BEGIN
	RT_BEGIN Resources
		CBUFFER SPerFrame ViewportConst;		
		CBUFFER SPBRModel ModelConstPBR;
	RT_END
ROOT_END
[Vertex: VS]

void main(VertexIn vert, out PixelIn res) 
{
	res.posW = mul(ModelConstPBR.model, float4(vert.pos, 1.0f)).xyz;
	res.posV = mul(ViewportConst.view, float4(res.posW, 1.0f)).xyz;
	res.posH = mul(ViewportConst.projection, float4(res.posV, 1.0f));
	res.normal = normalize(vert.pos);
}

[Pixel: PS]
#define ambient 0.3
void main(PixelIn pix, out float4 outFragColor: SV_TARGET)
{ 
	float3 l = -ViewportConst.lightDir;
	float3 n = normalize(pix.normal);
	float3 v = ViewportConst.camPos - pix.posW;
	float k = clamp(dot(l,n),0,1);
	float3 color =  BRDF(ModelConstPBR.baseColor,  v,l,n,ModelConstPBR.material.x,ModelConstPBR.material.y,ModelConstPBR.material.z, true, false)*k;
	color  = color  / (color  + 1);
    color = pow(color, 1.0/2.2);  
	outFragColor = float4(color, 1);
} 