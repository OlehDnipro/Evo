struct SWaterConst
{
	float4x4 mvp;
	float3 camPos;
	float streamOffset;
	float3 boxMax;
	float pad2;
	float3 boxMin;
	float pad3;
	float3 cubeCenter;
	float waveOffsetScale;
	float3 boxMaxFar;
	float pad5;
	float3 boxMinFar;
	float pad6;
};
struct SPBRModel
{
	float4x4 model;
	float4 material;
	//roughness, metallness, reflectance,..
	float3 baseColor;
	float pad;
};
struct VertexIn
{
	float3 pos    : Position;
	float2 uv     : TexCoord;
};

struct PixelIn
{
	float4 pos     : SV_Position;
	float2 uv      : TexCoord0;
	float2 waveUV1 : TexCoord1;
	float2 waveUV2 : TexCoord2;

	float3 posW	   : Position0;	
};
#include "PBRMath.h"

[Rootsig]
ROOT_BEGIN
	ST_BEGIN Samplers
		SAMPLER		SamplerState ColorSampler;
	ST_END

	RT_BEGIN Resources
		CBUFFER	SWaterConst WaterConst;
		CBUFFER	SPBRModel ModelConstPBR;

		TEXTURE Texture2D   WaveTex;
		TEXTURE Texture2D   PlanarReflection;
		TEXTURE Texture2D   WaterNormalTile;
		TEXTURE TextureCubeArray EnvTex;
	RT_END		
ROOT_END
[Vertex: VS]

void main(VertexIn vert, out PixelIn res) 
{
	res.uv = vert.uv;
	res.waveUV1 = res.uv*10;
	res.waveUV2 = res.uv*5;

	res.pos = mul(WaterConst.mvp, float4(vert.pos, 1.0f));
	res.posW = vert.pos;
}

[Pixel: PS]
float3 Parallax(float3 pos, float3 dir, uint is_far)
{
	//distances for the proxy cube planes per-component; divising is derived from similar triangles
	float3 DistancesOne, DistancesTwo;
	if(is_far)
	{
		DistancesOne = (WaterConst.boxMaxFar - pos)/dir;
		DistancesTwo = (WaterConst.boxMinFar - pos)/dir;
	}
	else
	{
		DistancesOne = (WaterConst.boxMax - pos)/dir;
		DistancesTwo = (WaterConst.boxMin - pos)/dir;
	}
	//remove "negative" distances which means intersection is not on positive ray direction
	float3 DistancesDirFiltered = max(DistancesOne, DistancesTwo);
	//now choose closest  intersection in proper direction
	float distance = min(min(DistancesDirFiltered.x, DistancesDirFiltered.y), DistancesDirFiltered.z);
	return (pos+distance*dir) - WaterConst.cubeCenter;
} 

void main(PixelIn pix, out float4 outFragColor: SV_TARGET)
{
	const float4 waterColor = float4(ModelConstPBR.baseColor, 0.0);

	float4 s = WaveTex.Sample(ColorSampler, pix.uv) - 0.5;
	float sobelX = s.z;
	float sobelY = s.w;

	float3 normal = float3(sobelX, 0.04, sobelY);

	normal  = normalize(normal);
	float3 viewVec = normalize(pix.posW - WaterConst.camPos);


	float w, h;
	PlanarReflection.GetDimensions(w,h);
	float2 refl_uv = pix.pos.xy;
	
	
	float3 lightPos = float3(6.18, 15, -19 );
	float3 lightDir = normalize(-lightPos);
	float3 usedNormal;
	float3 refrVec = Parallax(pix.posW, normalize(refract(viewVec, normal, 0.85)),0);
	float4 refr = EnvTex.Sample(ColorSampler, float4(refrVec,0)) * waterColor;

	if(abs(dot(normal, float3(0,1,0))) < 0.995)
	{
		float3 reflVec = Parallax(pix.posW, normalize(reflect(viewVec, normal)), 0) ;
		float4 refl = EnvTex.Sample(ColorSampler, float4(reflVec,0));
		if(refl.a < 0.0001)
		{
			reflVec = Parallax(pix.posW, normalize(reflect(viewVec, normal)),1);
			refl = EnvTex.Sample(ColorSampler, float4(reflVec,1));
		}
		refl*=0.9;
		outFragColor = lerp(refl, refr, dot(-viewVec, normal));
		usedNormal = normal;
	}
	else
	{ 
		float4 wave = (WaterNormalTile.Sample(ColorSampler, pix.waveUV1 +WaterConst.streamOffset ) + WaterNormalTile.Sample(ColorSampler, pix.waveUV2 + WaterConst.streamOffset))/2;
		float3 waveNormalUV = normalize(wave.xyz * 2 - 1);
		refl_uv = refl_uv + waveNormalUV.xy*WaterConst.waveOffsetScale; 
		refl_uv.x = refl_uv.x / w;
		refl_uv.y = refl_uv.y / h;		
		float4 prefl = PlanarReflection.Sample(ColorSampler, refl_uv);
		outFragColor = lerp(prefl, refr, dot(-viewVec, normal)); 
		/*
		float spec = dot(reflect(lightDir, float3(waveNormalUV.x, 1, waveNormalUV.y)), -viewVec);
		
		spec = pow(spec > 0 ? spec : 0, 16);
		outFragColor += float4(0.5,0.5,0.5,0.5)*spec;
		*/
		float3 waveNormal = normalize(float3(waveNormalUV.x, 1, waveNormalUV.y));
		usedNormal = waveNormal;
	}
	float k = dot(-lightDir,usedNormal); 
	float3 color = BRDF(outFragColor.rgb,  -viewVec, -lightDir,usedNormal,ModelConstPBR.material.x,ModelConstPBR.material.y,ModelConstPBR.material.z, false, false)*k;
//	color += float3(0,0.01,0.03);
	color  = color  / (color  + 1);
    color = pow(color, 1.0/2.2);  
	outFragColor = float4(color, 0.75);  
} 