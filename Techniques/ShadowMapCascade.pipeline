#define SHADOW_CASCADES_COUNT 4
struct VertexIn
{
	float3 pos    : Position;
	float2 uv     : TexCoord;
	float3 color  : Color;
	float3 normal : Normal;
};
struct SPerFrame
{
	float4x4 projection;
	float4x4 view;
	float4x4 lightViewProjection[SHADOW_CASCADES_COUNT];
	float4 cascadeSplits;
	float3 lightDir;
	float pad;
};
struct SPerModel
{
	float4x4 model;
};
struct PixelIn
{
	float4 posH    : SV_Position;
	float3 posW    : Position0;
	float3 posV    : Position1;
	float2 uv      : TexCoord;
	float3 color   : Color;
	float3 normal  : Normal;
};
[Rootsig]
ROOT_BEGIN
	ST_BEGIN Samplers
		SAMPLER		SamplerState ColorSampler;
		SAMPLER		SamplerComparisonState  ShadowSampler;
	ST_END
	RT_BEGIN FrameConst
		CBUFFER SPerFrame perFrame;		
	RT_END
	RT_BEGIN ModelConst
		CBUFFER SPerModel perModel;		
	RT_END
	RT_BEGIN ModelResources
		TEXTURE Texture2D Texture;
	RT_END
	RT_BEGIN FrameResources
		TEXTURE Texture2DArray ShadowMapCascades;
	RT_END
ROOT_END
[Vertex: VSShadowPass]

void main(VertexIn vert, out PixelIn res) 
{
	res.color = vert.color;
	res.normal = vert.normal;
	res.uv = vert.uv;
	res.posW = mul(perModel.model, float4(vert.pos, 1.0f)).xyz;
	res.posV = mul(perFrame.view, float4(res.posW, 1.0f)).xyz;
	res.posH = mul(perFrame.projection, float4(res.posV, 1.0f));
}

[Vertex: VSMainPass]

void main(VertexIn vert, out PixelIn res) 
{
	res.color = vert.color;
	res.normal = vert.normal;
	res.uv = vert.uv;
	res.posW = mul(perModel.model, float4(vert.pos, 1.0f)).xyz;
	res.posV = mul(perFrame.view, float4(res.posW, 1.0f)).xyz;
	res.posH = mul(perFrame.projection, float4(res.posV, 1.0f));
}

[Pixel: PSShadowPass]
#define ambient 0.3

void main(PixelIn pix, out float4 outFragColor: SV_TARGET)
{
	float4 color = Texture.Sample(ColorSampler, pix.uv);
	if(color.a < 0.5)
	{
		clip(-1);
	}
	outFragColor.rgba = float4(0,0,0,0);
} 
[Pixel: PSMainPass]
#define ambient 0.3
#define PCF_step 1.0f/4096
float SamplePCF(float4 shadowPos, int cascade)
{
	float2 uv = float2((1 + shadowPos.x)/2, (1 - shadowPos.y)/2 );
	float inLight = 0;
	for(int i = -1; i <= 1; i++ )
	{
		for(int j = -1; j <= 1; j++ )
		{
			inLight += ShadowMapCascades.SampleCmp(ShadowSampler, float3(uv + float2(i*PCF_step,j*PCF_step), cascade), shadowPos.z - 0.001);
		}
	}
	return inLight / 9;
}
void main(PixelIn pix, out float4 outFragColor: SV_TARGET)
{
	float4 color = Texture.Sample(ColorSampler, pix.uv);

	
	if(color.a < 0.5)
	{
		clip(-1);
	}
// Directional light
	float3 N = normalize(pix.normal);
	float3 L = normalize(-perFrame.lightDir);
	float3 H = normalize(L + pix.posV);
	int cascade = 0;
	for(int  i = 0; i < SHADOW_CASCADES_COUNT - 1; i++)
	{
		if(pix.posV.z > perFrame.cascadeSplits[i])
			cascade = i + 1;
	}

	float4 shadowPos = mul(perFrame.lightViewProjection[cascade], float4(pix.posW, 1 ));
	shadowPos /= shadowPos.w;
	float diffuse = max(SamplePCF(shadowPos, cascade)*dot(N, L), ambient);
	float3 lightColor = float3(1.0f,1.0f,1.0f);
	outFragColor.rgb = max(lightColor * (diffuse * color.rgb), float3(0.0f, 0.0f, 0.0f));
	outFragColor.a = color.a;
} 